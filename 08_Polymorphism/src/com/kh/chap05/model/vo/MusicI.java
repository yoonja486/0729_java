package com.kh.chap05.model.vo;

/*
 * interface(객체 생성 불가능)
 * - 인터페이스로는 객체 생성이 불가능 하기 때문에 생성자를 기술할 수 없음
 * 
 * [ 표현법 ] 
 * 
 * 접근제한자 interface 인터페이스식별자{ 
 * 
 * 		// 필드, 메소드
 * }
 * 
 * 
 * 구체 클래스(public)
 * 추상 클래스(abstract)
 * 인터페이스(추상화를 코드상으로 옮긴거)
 * 
 * - 추상클래스보다 더욱 강한 규칙성, 강제성을 가짐
 *
 * - 인터페이스의 필드는 상수 필드
 * 
 * - 인터페이스의 메소드는 키워드를 붙이지 않는 이상 추상메소드로 판단
 * 
 * - 인터페이스는 다중 구현을 허용한다.
 * 
 * - "무조건 구현해야하는 기능이 있을 경우 인터페이스를 사용해서
 *    사용법만 만들어 주고 구현하는 쪽에서 실체화하게 만듬" ==> 오버라이딩
 * 
 * 1. 추상클래스와 인터페이스의 공통점
 * 
 * - 객체 생성은 불가능 하지만, 부모자료형의 참조타입으로는 사용이 가능함(다형성을 적용할 수 있음)
 * - 추상메소드를 가지고 있을 경우, 상속(구현)받는 클래스에서 추상메소드를 오버라이딩 하도록 강제함
 * 
 * 2. 차이점
 * 
 * - 추상클래스 : 멤버로 일반필드, 일반메소드를 가질 수 있음
 *			   추상 메소드는 있어도 그만 없어도 그만!
 *
 * - 인터페이스 : 상수 필드, 특정한 경우를 제외하면 모든 메소드를 추상메소드로 정의 해야함
 * 
 *  둘 다 다형성을 적용하여 외부에서 보여지는 타입의 용도로 사용하지만
 * -> 추상클래스는 자식클래스가 상속을 받아서 필드 / 메소드를 재사용하고 클래스를 확장하는 용도
 * -> 인터페이스는 기능의 구현을 강제하기 위한 용도
 * 
 */

public interface MusicI {

	/*public static final*/ int NUM = 1;
	// 인터페이스의 모든 필드들은 암묵적으로 public static final 숨겨있음
	// public abstract 생략가능
	
	void play(); 	// 인터페이스의 메소드들은 기본적으로 추상메소드
	
	default void stop() {
		System.out.println("음악을 멈춥니다.");
	}
	// 인터페이스를 구현한 모든 클래스가 동일하게 수행해야하는 메소드에는 default 키워드를 붙임!
	// default 접근제한자와는 전혀 다른 문법(지금상황에서는 키워드로 쓰임)
	
	
}
